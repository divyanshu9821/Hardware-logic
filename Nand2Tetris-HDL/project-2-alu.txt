CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x , b=false , sel=zx , out=zxOut);
    Not16(in=zxOut , out=notZxOut );
    Mux16(a=zxOut , b=notZxOut , sel=nx , out=nxOut );

    Mux16(a=y , b=false , sel=zy , out=zyOut);
    Not16(in=zyOut , out=notZyOut );
    Mux16(a=zyOut , b=notZyOut , sel=ny , out=nyOut );
    
    And16(a=nxOut , b=nyOut , out=andOut );
    Add16(a=nxOut, b=nyOut , out=addOut );
    Mux16(a=andOut , b=addOut , sel=f , out=fOut );
    
    Not16(in=fOut , out=notFOut );
    Mux16(a=fOut , b=notFOut , sel=no , out=out, out[15]=ng, out[0..7]=preZr1, out[8..15]=preZr2 );
    Or8Way(in=preZr1 , out=zr1 );
    Or8Way(in=preZr2 , out=zr2 );
    Or(a=zr1 , b=zr2 , out=preZr );
    Not(in=preZr , out=zr );
}
