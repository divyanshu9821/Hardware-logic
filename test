const module_id = 1;

let clk; // rtc
let memory; // eprom

let filled_till = 0;
let count = 0;

let d = [];
function get_date(){
	d[0] = clk.year;
	d[1] = clk.month;
	d[2] = clk.date;
}

let t = [];
function get_time(){
	t[0] = clk.month;
	t[1] = clk.month;
	t[2] = clk.month;
}

// change memory counter
function commit(){
	memory[0] = filled_till;
}

// put data in memory register
function put(data){
	memory[++filled_till] = data; 
}

function refresh_screen(){
	print(year);
	print(month);
	print(date);

	print(hour);
	print(minute);
	print(second);
	
	print(count);
}


let till = memory[0];
let ld = [];
let lt = [];
let lc;

function find_last(){
	while(memory[till]!='\n'){
		till--;
		if(till == 0) break;
	}

	if(till == 0) return;

	lt[0] = memory[till-4]; // last hour
	lt[1] = memory[till-3]; // last minutes
	lt[2] = memory[till-2]; // last seconds

	lc = memory[till-1]; // last count

	while(memory[till]!='@'){
		till--;
	}

	ld[0] = memory[till+1];
	ld[1] = memory[till+2];
	ld[2] = memory[till+3];
}

function print_last(){
	print(ld[0]);
	print(ld[1]);
	print(ld[2]);

	print(lt[0]);
	print(lt[1]);
	print(lt[2]);
	
	print(lc);
}

function item_detected(){
	get_time();

	put(t[0]);
	put(t[1]);
	put(t[2]);
	put(++count);
	put('\n');
	
	commit();

	refresh_screen();
}

function __start(){
	filled_till = memory[0];
	count = 0;
	get_date();
	
	put('@');
	put(d[0]);	
	put(d[1]);
	put(d[2]);

	commit();

	find_last();
	print_last();
}

function __loop(){
	if(item){
		item_detected();
	}
	delay(10);
}
