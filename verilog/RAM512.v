/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Demux3
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    input [2:0] sel,
    input in
);
    assign out_0 = (sel == 3'h0)? in : Default;
    assign out_1 = (sel == 3'h1)? in : Default;
    assign out_2 = (sel == 3'h2)? in : Default;
    assign out_3 = (sel == 3'h3)? in : Default;
    assign out_4 = (sel == 3'h4)? in : Default;
    assign out_5 = (sel == 3'h5)? in : Default;
    assign out_6 = (sel == 3'h6)? in : Default;
    assign out_7 = (sel == 3'h7)? in : Default;
endmodule


module \1Bit  (
  input CLK,
  input D,
  input EN,
  output OUT
);
  wire OUT_temp;
  wire s0;
  wire s1;
  wire s2;
  assign s2 = ~ CLK;
  assign OUT_temp = ~ (~ (s0 & ~ s2) & ~ (OUT_temp & ~ (s1 & ~ s2)));
  assign s0 = ~ (~ (s2 & (D & EN)) & s1);
  assign s1 = ~ (s0 & ~ ((EN & ~ D) & s2));
  assign OUT = OUT_temp;
endmodule

module Register (
  input [15:0] IN,
  input LOAD,
  input CLK,
  output [15:0] OUT
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  assign s0 = IN[0];
  assign s8 = IN[1];
  assign s16 = IN[2];
  assign s24 = IN[3];
  assign s2 = IN[4];
  assign s10 = IN[5];
  assign s18 = IN[6];
  assign s26 = IN[7];
  assign s4 = IN[8];
  assign s12 = IN[9];
  assign s20 = IN[10];
  assign s28 = IN[11];
  assign s6 = IN[12];
  assign s14 = IN[13];
  assign s22 = IN[14];
  assign s30 = IN[15];
  \1Bit  \1Bit_i0 (
    .CLK( CLK ),
    .D( s0 ),
    .EN( LOAD ),
    .OUT( s1 )
  );
  \1Bit  \1Bit_i1 (
    .CLK( CLK ),
    .D( s2 ),
    .EN( LOAD ),
    .OUT( s3 )
  );
  \1Bit  \1Bit_i2 (
    .CLK( CLK ),
    .D( s4 ),
    .EN( LOAD ),
    .OUT( s5 )
  );
  \1Bit  \1Bit_i3 (
    .CLK( CLK ),
    .D( s6 ),
    .EN( LOAD ),
    .OUT( s7 )
  );
  \1Bit  \1Bit_i4 (
    .CLK( CLK ),
    .D( s8 ),
    .EN( LOAD ),
    .OUT( s9 )
  );
  \1Bit  \1Bit_i5 (
    .CLK( CLK ),
    .D( s10 ),
    .EN( LOAD ),
    .OUT( s11 )
  );
  \1Bit  \1Bit_i6 (
    .CLK( CLK ),
    .D( s12 ),
    .EN( LOAD ),
    .OUT( s13 )
  );
  \1Bit  \1Bit_i7 (
    .CLK( CLK ),
    .D( s14 ),
    .EN( LOAD ),
    .OUT( s15 )
  );
  \1Bit  \1Bit_i8 (
    .CLK( CLK ),
    .D( s16 ),
    .EN( LOAD ),
    .OUT( s17 )
  );
  \1Bit  \1Bit_i9 (
    .CLK( CLK ),
    .D( s18 ),
    .EN( LOAD ),
    .OUT( s19 )
  );
  \1Bit  \1Bit_i10 (
    .CLK( CLK ),
    .D( s20 ),
    .EN( LOAD ),
    .OUT( s21 )
  );
  \1Bit  \1Bit_i11 (
    .CLK( CLK ),
    .D( s22 ),
    .EN( LOAD ),
    .OUT( s23 )
  );
  \1Bit  \1Bit_i12 (
    .CLK( CLK ),
    .D( s24 ),
    .EN( LOAD ),
    .OUT( s25 )
  );
  \1Bit  \1Bit_i13 (
    .CLK( CLK ),
    .D( s26 ),
    .EN( LOAD ),
    .OUT( s27 )
  );
  \1Bit  \1Bit_i14 (
    .CLK( CLK ),
    .D( s28 ),
    .EN( LOAD ),
    .OUT( s29 )
  );
  \1Bit  \1Bit_i15 (
    .CLK( CLK ),
    .D( s30 ),
    .EN( LOAD ),
    .OUT( s31 )
  );
  assign OUT[0] = s1;
  assign OUT[1] = s9;
  assign OUT[2] = s17;
  assign OUT[3] = s25;
  assign OUT[4] = s3;
  assign OUT[5] = s11;
  assign OUT[6] = s19;
  assign OUT[7] = s27;
  assign OUT[8] = s5;
  assign OUT[9] = s13;
  assign OUT[10] = s21;
  assign OUT[11] = s29;
  assign OUT[12] = s7;
  assign OUT[13] = s15;
  assign OUT[14] = s23;
  assign OUT[15] = s31;
endmodule

module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module RAM8 (
  input CLK,
  input LOAD,
  input [2:0] SEL,
  input [15:0] IN,
  output [15:0] OUT
);
  wire s0;
  wire [15:0] s1;
  wire s2;
  wire [15:0] s3;
  wire s4;
  wire [15:0] s5;
  wire s6;
  wire [15:0] s7;
  wire s8;
  wire [15:0] s9;
  wire s10;
  wire [15:0] s11;
  wire s12;
  wire [15:0] s13;
  wire s14;
  wire [15:0] s15;
  Demux3 #(
    .Default(0)
  )
  Demux3_i0 (
    .sel( SEL ),
    .in( LOAD ),
    .out_0( s2 ),
    .out_1( s0 ),
    .out_2( s6 ),
    .out_3( s4 ),
    .out_4( s10 ),
    .out_5( s8 ),
    .out_6( s14 ),
    .out_7( s12 )
  );
  Register Register_i1 (
    .IN( IN ),
    .LOAD( s0 ),
    .CLK( CLK ),
    .OUT( s1 )
  );
  Register Register_i2 (
    .IN( IN ),
    .LOAD( s2 ),
    .CLK( CLK ),
    .OUT( s3 )
  );
  Register Register_i3 (
    .IN( IN ),
    .LOAD( s4 ),
    .CLK( CLK ),
    .OUT( s5 )
  );
  Register Register_i4 (
    .IN( IN ),
    .LOAD( s6 ),
    .CLK( CLK ),
    .OUT( s7 )
  );
  Register Register_i5 (
    .IN( IN ),
    .LOAD( s8 ),
    .CLK( CLK ),
    .OUT( s9 )
  );
  Register Register_i6 (
    .IN( IN ),
    .LOAD( s10 ),
    .CLK( CLK ),
    .OUT( s11 )
  );
  Register Register_i7 (
    .IN( IN ),
    .LOAD( s12 ),
    .CLK( CLK ),
    .OUT( s13 )
  );
  Register Register_i8 (
    .IN( IN ),
    .LOAD( s14 ),
    .CLK( CLK ),
    .OUT( s15 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i9 (
    .sel( SEL ),
    .in_0( s3 ),
    .in_1( s1 ),
    .in_2( s7 ),
    .in_3( s5 ),
    .in_4( s11 ),
    .in_5( s9 ),
    .in_6( s15 ),
    .in_7( s13 ),
    .out( OUT )
  );
endmodule

module RAM64 (
  input [15:0] IN,
  input CLK,
  input LOAD,
  input [5:0] SEL,
  output [15:0] OUT
);
  wire s0;
  wire [2:0] s1;
  wire [15:0] s2;
  wire s3;
  wire [15:0] s4;
  wire s5;
  wire [15:0] s6;
  wire s7;
  wire [15:0] s8;
  wire s9;
  wire [15:0] s10;
  wire s11;
  wire [15:0] s12;
  wire s13;
  wire [15:0] s14;
  wire s15;
  wire [15:0] s16;
  wire [2:0] s17;
  assign s1 = SEL[2:0];
  assign s17 = SEL[5:3];
  Demux3 #(
    .Default(0)
  )
  Demux3_i0 (
    .sel( s17 ),
    .in( LOAD ),
    .out_0( s0 ),
    .out_1( s3 ),
    .out_2( s5 ),
    .out_3( s7 ),
    .out_4( s9 ),
    .out_5( s11 ),
    .out_6( s13 ),
    .out_7( s15 )
  );
  RAM8 RAM8_i1 (
    .CLK( CLK ),
    .LOAD( s0 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s2 )
  );
  RAM8 RAM8_i2 (
    .CLK( CLK ),
    .LOAD( s3 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s4 )
  );
  RAM8 RAM8_i3 (
    .CLK( CLK ),
    .LOAD( s5 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s6 )
  );
  RAM8 RAM8_i4 (
    .CLK( CLK ),
    .LOAD( s7 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s8 )
  );
  RAM8 RAM8_i5 (
    .CLK( CLK ),
    .LOAD( s9 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s10 )
  );
  RAM8 RAM8_i6 (
    .CLK( CLK ),
    .LOAD( s11 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s12 )
  );
  RAM8 RAM8_i7 (
    .CLK( CLK ),
    .LOAD( s13 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s14 )
  );
  RAM8 RAM8_i8 (
    .CLK( CLK ),
    .LOAD( s15 ),
    .SEL( s1 ),
    .IN( IN ),
    .OUT( s16 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i9 (
    .sel( s17 ),
    .in_0( s2 ),
    .in_1( s4 ),
    .in_2( s6 ),
    .in_3( s8 ),
    .in_4( s10 ),
    .in_5( s12 ),
    .in_6( s14 ),
    .in_7( s16 ),
    .out( OUT )
  );
endmodule

module RAM512 (
  input [15:0] IN,
  input CLK,
  input LOAD,
  input [8:0] SEL,
  output [15:0] OUT
);
  wire [2:0] s0;
  wire [15:0] s1;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire [15:0] s7;
  wire [15:0] s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire [5:0] s17;
  assign s17 = SEL[5:0];
  assign s0 = SEL[8:6];
  Demux3 #(
    .Default(0)
  )
  Demux3_i0 (
    .sel( s0 ),
    .in( LOAD ),
    .out_0( s9 ),
    .out_1( s10 ),
    .out_2( s11 ),
    .out_3( s12 ),
    .out_4( s13 ),
    .out_5( s14 ),
    .out_6( s15 ),
    .out_7( s16 )
  );
  RAM64 RAM64_i1 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s16 ),
    .SEL( s17 ),
    .OUT( s8 )
  );
  RAM64 RAM64_i2 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s15 ),
    .SEL( s17 ),
    .OUT( s7 )
  );
  RAM64 RAM64_i3 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s14 ),
    .SEL( s17 ),
    .OUT( s6 )
  );
  RAM64 RAM64_i4 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s13 ),
    .SEL( s17 ),
    .OUT( s5 )
  );
  RAM64 RAM64_i5 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s12 ),
    .SEL( s17 ),
    .OUT( s4 )
  );
  RAM64 RAM64_i6 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s11 ),
    .SEL( s17 ),
    .OUT( s3 )
  );
  RAM64 RAM64_i7 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s10 ),
    .SEL( s17 ),
    .OUT( s2 )
  );
  RAM64 RAM64_i8 (
    .IN( IN ),
    .CLK( CLK ),
    .LOAD( s9 ),
    .SEL( s17 ),
    .OUT( s1 )
  );
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i9 (
    .sel( s0 ),
    .in_0( s1 ),
    .in_1( s2 ),
    .in_2( s3 ),
    .in_3( s4 ),
    .in_4( s5 ),
    .in_5( s6 ),
    .in_6( s7 ),
    .in_7( s8 ),
    .out( OUT )
  );
endmodule
