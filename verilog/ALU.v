/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Half_Adder (
  input A,
  input B,
  output SUM,
  output CARRY
);
  assign SUM = (A ^ B);
  assign CARRY = (A & B);
endmodule

module FULL_ADDER (
  input B,
  input C,
  input A,
  output SUM,
  output CARRY
);
  wire s0;
  wire s1;
  wire s2;
  Half_Adder Half_Adder_i0 (
    .A( C ),
    .B( A ),
    .SUM( s0 ),
    .CARRY( s1 )
  );
  Half_Adder Half_Adder_i1 (
    .A( s0 ),
    .B( B ),
    .SUM( SUM ),
    .CARRY( s2 )
  );
  assign CARRY = (s1 | s2);
endmodule

module Addition (
  input CIN,
  input [15:0] A,
  input [15:0] B,
  output [15:0] SUM,
  output COUT
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire [3:0] s34;
  wire [3:0] s35;
  wire [3:0] s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  wire s47;
  wire s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire [3:0] s53;
  wire [3:0] s54;
  wire [3:0] s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  wire s64;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire [3:0] s71;
  wire [3:0] s72;
  wire [3:0] s73;
  wire [3:0] s74;
  assign s72 = B[15:12];
  assign s54 = B[11:8];
  assign s74 = B[7:4];
  assign s17 = B[3:0];
  assign s71 = A[15:12];
  assign s53 = A[11:8];
  assign s34 = A[7:4];
  assign s16 = A[3:0];
  assign s1 = s16[0];
  assign s5 = s16[1];
  assign s9 = s16[2];
  assign s13 = s16[3];
  assign s0 = s17[0];
  assign s4 = s17[1];
  assign s8 = s17[2];
  assign s12 = s17[3];
  assign s19 = s34[0];
  assign s23 = s34[1];
  assign s27 = s34[2];
  assign s31 = s34[3];
  assign s38 = s53[0];
  assign s42 = s53[1];
  assign s46 = s53[2];
  assign s50 = s53[3];
  assign s37 = s54[0];
  assign s41 = s54[1];
  assign s45 = s54[2];
  assign s49 = s54[3];
  assign s57 = s71[0];
  assign s61 = s71[1];
  assign s65 = s71[2];
  assign s69 = s71[3];
  assign s56 = s72[0];
  assign s60 = s72[1];
  assign s64 = s72[2];
  assign s68 = s72[3];
  assign s18 = s74[0];
  assign s22 = s74[1];
  assign s26 = s74[2];
  assign s30 = s74[3];
  FULL_ADDER FULL_ADDER_i0 (
    .B( s0 ),
    .C( CIN ),
    .A( s1 ),
    .SUM( s2 ),
    .CARRY( s3 )
  );
  FULL_ADDER FULL_ADDER_i1 (
    .B( s4 ),
    .C( s3 ),
    .A( s5 ),
    .SUM( s6 ),
    .CARRY( s7 )
  );
  FULL_ADDER FULL_ADDER_i2 (
    .B( s8 ),
    .C( s7 ),
    .A( s9 ),
    .SUM( s10 ),
    .CARRY( s11 )
  );
  FULL_ADDER FULL_ADDER_i3 (
    .B( s12 ),
    .C( s11 ),
    .A( s13 ),
    .SUM( s14 ),
    .CARRY( s15 )
  );
  FULL_ADDER FULL_ADDER_i4 (
    .B( s18 ),
    .C( s15 ),
    .A( s19 ),
    .SUM( s20 ),
    .CARRY( s21 )
  );
  assign s35[0] = s2;
  assign s35[1] = s6;
  assign s35[2] = s10;
  assign s35[3] = s14;
  FULL_ADDER FULL_ADDER_i5 (
    .B( s22 ),
    .C( s21 ),
    .A( s23 ),
    .SUM( s24 ),
    .CARRY( s25 )
  );
  FULL_ADDER FULL_ADDER_i6 (
    .B( s26 ),
    .C( s25 ),
    .A( s27 ),
    .SUM( s28 ),
    .CARRY( s29 )
  );
  FULL_ADDER FULL_ADDER_i7 (
    .B( s30 ),
    .C( s29 ),
    .A( s31 ),
    .SUM( s32 ),
    .CARRY( s33 )
  );
  assign s36[0] = s20;
  assign s36[1] = s24;
  assign s36[2] = s28;
  assign s36[3] = s32;
  FULL_ADDER FULL_ADDER_i8 (
    .B( s37 ),
    .C( s33 ),
    .A( s38 ),
    .SUM( s39 ),
    .CARRY( s40 )
  );
  FULL_ADDER FULL_ADDER_i9 (
    .B( s41 ),
    .C( s40 ),
    .A( s42 ),
    .SUM( s43 ),
    .CARRY( s44 )
  );
  FULL_ADDER FULL_ADDER_i10 (
    .B( s45 ),
    .C( s44 ),
    .A( s46 ),
    .SUM( s47 ),
    .CARRY( s48 )
  );
  FULL_ADDER FULL_ADDER_i11 (
    .B( s49 ),
    .C( s48 ),
    .A( s50 ),
    .SUM( s51 ),
    .CARRY( s52 )
  );
  assign s55[0] = s39;
  assign s55[1] = s43;
  assign s55[2] = s47;
  assign s55[3] = s51;
  FULL_ADDER FULL_ADDER_i12 (
    .B( s56 ),
    .C( s52 ),
    .A( s57 ),
    .SUM( s58 ),
    .CARRY( s59 )
  );
  FULL_ADDER FULL_ADDER_i13 (
    .B( s60 ),
    .C( s59 ),
    .A( s61 ),
    .SUM( s62 ),
    .CARRY( s63 )
  );
  FULL_ADDER FULL_ADDER_i14 (
    .B( s64 ),
    .C( s63 ),
    .A( s65 ),
    .SUM( s66 ),
    .CARRY( s67 )
  );
  FULL_ADDER FULL_ADDER_i15 (
    .B( s68 ),
    .C( s67 ),
    .A( s69 ),
    .SUM( s70 ),
    .CARRY( COUT )
  );
  assign s73[0] = s58;
  assign s73[1] = s62;
  assign s73[2] = s66;
  assign s73[3] = s70;
  assign SUM[15:12] = s73;
  assign SUM[11:8] = s55;
  assign SUM[7:4] = s36;
  assign SUM[3:0] = s35;
endmodule

module ALU (
  input [15:0] X,
  input [15:0] Y,
  input ZX,
  input ZY,
  input NX,
  input NY,
  input F,
  input NO,
  output [15:0] OUT,
  output ZR,
  output NG
);
  wire [15:0] s0;
  wire [15:0] s1;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire [15:0] s7;
  wire [15:0] s8;
  wire [15:0] s9;
  wire [15:0] OUT_temp;
  wire [14:0] s10;
  wire [4:0] s11;
  wire [4:0] s12;
  wire [4:0] s13;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i0 (
    .sel( ZX ),
    .in_0( X ),
    .in_1( 16'b0 ),
    .out( s0 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i1 (
    .sel( ZY ),
    .in_0( Y ),
    .in_1( 16'b0 ),
    .out( s1 )
  );
  assign s2 = ~ s0;
  assign s4 = ~ s1;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i2 (
    .sel( NX ),
    .in_0( s0 ),
    .in_1( s2 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i3 (
    .sel( NY ),
    .in_0( s1 ),
    .in_1( s4 ),
    .out( s5 )
  );
  assign s6 = (s3 & s5);
  Addition Addition_i4 (
    .CIN( 1'b0 ),
    .A( s3 ),
    .B( s5 ),
    .SUM( s7 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i5 (
    .sel( F ),
    .in_0( s6 ),
    .in_1( s7 ),
    .out( s8 )
  );
  assign s9 = ~ s8;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i6 (
    .sel( NO ),
    .in_0( s8 ),
    .in_1( s9 ),
    .out( OUT_temp )
  );
  assign NG = OUT_temp[15];
  assign s10 = OUT_temp[14:0];
  assign s11 = s10[4:0];
  assign s12 = s10[9:5];
  assign s13 = s10[14:10];
  assign ZR = ~ ((s11[0] | s11[1] | s11[2] | s11[3] | s11[4]) | (s12[0] | s12[1] | s12[2] | s12[3] | s12[4]) | ((s13[0] | s13[1] | s13[2] | s13[3] | s13[4]) | OUT_temp[15]));
  assign OUT = OUT_temp;
endmodule
